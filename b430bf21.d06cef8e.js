(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),s=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=s(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),u=r,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||a;return n?o.a.createElement(m,p(p({ref:t},l),{},{components:n})):o.a.createElement(m,p({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},108:function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}));var r=n(22),o=n(109);function a(){var e=Object(r.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,a=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var a=void 0===r?{}:r,i=a.forcePrependBaseUrl,p=void 0!==i&&i,c=a.absolute,l=void 0!==c&&c;if(!n)return n;if(n.startsWith("#"))return n;if(Object(o.b)(n))return n;if(p)return t+n;var s=n.startsWith(t)?n:t+n.replace(/^\//,"");return l?e+s:s}(a,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,a().withBaseUrl)(e,t)}},109:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!r(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}))},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),o=n(7),a=(n(0),n(105)),i=(n(108),["components"]),p={id:"deployEthDapp",title:"Deploy Ethereum DApps to Godwoken"},c={unversionedId:"deployEthDapp",id:"deployEthDapp",isDocsHomePage:!1,title:"Deploy Ethereum DApps to Godwoken",description:"Workflow",source:"@site/docs\\deployEthDapp.md",slug:"/deployEthDapp",permalink:"/godwoken-review/deployEthDapp",version:"current",sidebar:"sidebar2",previous:{title:"Deployment",permalink:"/godwoken-review/deployment"},next:{title:"Deposit & Withdraw CKB on Godwoken",permalink:"/godwoken-review/deposit_withdrawal"}},l=[{value:"Workflow",id:"workflow",children:[]},{value:"RPC Documentation for Reference",id:"rpc-documentation-for-reference",children:[]},{value:"An Example of Deploying an Ethereum DApp to Godwoken by Godwoken-Kicker",id:"an-example-of-deploying-an-ethereum-dapp-to-godwoken-by-godwoken-kicker",children:[{value:"Environment",id:"environment",children:[]},{value:"Prerequisite Development Software",id:"prerequisite-development-software",children:[]},{value:"Prerequisite Wallet Software",id:"prerequisite-wallet-software",children:[]},{value:"Steps",id:"steps",children:[]}]},{value:"Project Examples",id:"project-examples",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(o.a)(e,i);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"workflow"},"Workflow"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Set up the environment.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Choose Godwoken testnet or mainnet network, or deploy a local Godwoken network."),Object(a.b)("p",{parentName:"li"},"For more information about Godwoken networks, see ",Object(a.b)("a",{parentName:"p",href:"#godwoken-networks"},"Godwoken Networks"),"."),Object(a.b)("p",{parentName:"li"},"For more information about deploying a Godwoken network, see the sections under Deployment.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Deploy an Ethereum DApp to Godwoken."))),Object(a.b)("h2",{id:"rpc-documentation-for-reference"},"RPC Documentation for Reference"),Object(a.b)("p",null,"Godwoken provides a web3 RPC compatible layer."),Object(a.b)("p",null,"For more information, see ",Object(a.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken-web3"},"Ethereum RPC (web3 RPC)"),"."),Object(a.b)("h2",{id:"an-example-of-deploying-an-ethereum-dapp-to-godwoken-by-godwoken-kicker"},"An Example of Deploying an Ethereum DApp to Godwoken by Godwoken-Kicker"),Object(a.b)("h3",{id:"environment"},"Environment"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Ubuntu 20.04")),Object(a.b)("h3",{id:"prerequisite-development-software"},"Prerequisite Development Software"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Node.js v14"),Object(a.b)("li",{parentName:"ul"},"Yarn "),Object(a.b)("li",{parentName:"ul"},"Docker"),Object(a.b)("li",{parentName:"ul"},"Docker-compose"),Object(a.b)("li",{parentName:"ul"},"Rust")),Object(a.b)("h3",{id:"prerequisite-wallet-software"},"Prerequisite Wallet Software"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"MetaMask")),Object(a.b)("h3",{id:"steps"},"Steps"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Clone an existing ETH DApp."),Object(a.b)("p",{parentName:"li"},"Create a relative directory, if needed, then enter the directory and clone the repository . "),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ mkdir -p ~/projects\n$ cd ~/projects\n$ git clone https://github.com/TTNguyenDev/Dapps-Support-ForceBridge -b starter\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Run the ETH DApp.\nInstall the dependencies and  build the smart contracts. Start Ganache to run a local Ethereum development chain."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ cd ~/projects/Dapps-Support-ForceBridge\n$ yarn && yarn build && yarn start:ganache\n")),Object(a.b)("p",{parentName:"li"},"Open another terminal and start the UI server. "),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ cd ~/projects/Dapps-Support-ForceBridge\n$ yarn ui\n")),Object(a.b)("p",{parentName:"li"},"Open a browser tab to http://localhost:3000 to view the DApp after the server started. ")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Set up Godwoken Testnet in MetaMask."),Object(a.b)("p",{parentName:"li"},"Set up the Metamask extension in browser and the custom RPC with the following information:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"Network Name: Godwoken Testnet\nNew RPC URL: http://godwoken-testnet-web3-rpc.ckbapp.dev/\nChain ID: 71393\nCurrency Symbol (optional): N/A\nBlock Explorer URL (optional): N/A\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Install Polyjuice dependencies."),Object(a.b)("p",{parentName:"li"},"To port the Ethereum application with Nervos' Layer 2, the first step is to install the dependencies that are necessary for Godwoken and Polyjuice to work with. "),Object(a.b)("p",{parentName:"li"},"Two dependencies need to be added to allow the existing web3 DApp to work with the second tier solution Polyjuice: ",Object(a.b)("inlineCode",{parentName:"p"},"@polyjuice-provider/web3")," and ",Object(a.b)("inlineCode",{parentName:"p"},"nervos-godwoken-integration"),"."),Object(a.b)("p",{parentName:"li"},"@polyjuice-provider/web3 is a custom Polyjuice web3 provider used to replace the web3 library, necessary to interact with the Nervos Layer 2 smart contract. Nervos-godwoken-integration is a tool that can generate Polyjuice addresses based on Ethereum addresses."),Object(a.b)("p",{parentName:"li"},"Use the following commands to install both:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ cd ~/projects/Dapps-Support-ForceBridge\n$ yarn add @polyjuice-provider/web3@0.0.1-rc7 nervos-godwoken-integration@0.0.6\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Add and configure the web3 provider for the Polyjuice web3 provider."),Object(a.b)("p",{parentName:"li"},"Create a new ",Object(a.b)("inlineCode",{parentName:"p"},"config.ts")," file under the ",Object(a.b)("inlineCode",{parentName:"p"},"src"),":"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ cd ~/projects/Dapps-Support-ForceBridge/src\n$ touch config.ts\n")),Object(a.b)("p",{parentName:"li"},"Then fill it with the values presented:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"export const CONFIG = {\nWEB3_PROVIDER_URL: 'https://godwoken-testnet-web3-rpc.ckbapp.dev'\nROLLUP_TYPE_HASH: '0x4cc2e6526204ae6a2e8fcf12f7ad472f41a1606d5b9624beebd215d780809f6a'\nETH_ACCOUNT_LOCK_CODE_HASH: '0xdeec13a7b8e100579541384ccaf4b5223733e4a5483c3aec95ddc4c1d5ea5b22'\n}\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Update the UI file.\nUpdate the main UI in the file ",Object(a.b)("inlineCode",{parentName:"p"},"~/projects/blockchain-workshop-ethereum-simple/src/ui/app.tsx"),". Add the following lines in the main dependency importation section of the file:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"import { PolyjuiceHttpProvider } from '@polyjuice-provider/web3';\n\nimport { AddressTranslator } from 'nervos-godwoken-integration';\n\nimport { CONFIG } from '../config';\n")),Object(a.b)("p",{parentName:"li"},"Find and replace line."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"const web3 = new Web3((window as any).ethereum);\n")),Object(a.b)("p",{parentName:"li"}," to"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"const godwokenRpcUrl = CONFIG.WEB3_PROVIDER_URL;\nconst providerConfig = {\nrollupTypeHash: CONFIG.ROLLUP_TYPE_HASH,\nethAccountLockCodeHash: CONFIG.ETH_ACCOUNT_LOCK_CODE_HASH,\nweb3Url: godwokenRpcUrl\n};\nconst provider = new PolyjuiceHttpProvider(godwokenRpcUrl, providerConfig);\nconst web3 = new Web3(provider);\n")),Object(a.b)("p",{parentName:"li"},"Add a new constant and include the ",Object(a.b)("inlineCode",{parentName:"p"},"useEffect")," hook to display the Polyjuice address to the user:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"const [polyjuiceAddress, setPolyjuiceAddress] = useState<string | undefined>();\n\nuseEffect(() => {\n    if (accounts-.[0]) {\n        const addressTranslator = new AddressTranslator();\n        setPolyjuiceAddress(addressTranslator.ethAddressToGodwokenShortAddress(accounts-.[0]));\n    } else {\n        setPolyjuiceAddress(undefined);\n    }\n}, [accounts-.[0]]);\n")),Object(a.b)("p",{parentName:"li"},"The ",Object(a.b)("inlineCode",{parentName:"p"},"useEffect")," hook will execute when ",Object(a.b)("inlineCode",{parentName:"p"},"accounts-[0]")," changes. "),Object(a.b)("p",{parentName:"li"},"Add a new line to the html code to display Polyjuice Address:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"<br />\nYour Polyjuice address: <b>{polyjuiceAddress || ' - '}</b>\n<br />\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Set gas limit higher."),Object(a.b)("p",{parentName:"li"},"Godwoken Testnet requires a higher gas limit to be set for transactions."),Object(a.b)("p",{parentName:"li"},"Open the ",Object(a.b)("inlineCode",{parentName:"p"},"TTNguyenToken.ts ")," file under the path ",Object(a.b)("inlineCode",{parentName:"p"},"~/projects/Dapps-Support-ForceBridge/src/lib/contracts")," and add a new constant at the beginning of the file:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"const DEFAULT_SEND_OPTIONS = {\n    gas: 6000000\n};\n")),Object(a.b)("p",{parentName:"li"},"Modify 2 functions from:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"async setTransferToken(fromAddress: string, toAddress: string, amount: number) {\n        const tx = await this.contract.methods\n            .transfer(toAddress, this.web3.utils.toWei(this.web3.utils.toBN(amount)))\n            .send({\n                from: fromAddress\n            });\n\n        return tx;\n    }\n    \n      async deploy(fromAddress: string) {\n        const deployTx = await (this.contract\n            .deploy({\n                data: TTNguyenTokenJSON.bytecode,\n                arguments: []\n            })\n            .send({\n                from: fromAddress,\n                to: '0x0000000000000000000000000000000000000000'\n            } as any) as any);\n\n        this.useDeployed(deployTx.contractAddress);\n\n        return deployTx.transactionHash;\n    }\n")),Object(a.b)("p",{parentName:"li"},"to:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"async setTransferToken(fromAddress: string, toAddress: string, amount: number) {\n        const tx = await this.contract.methods\n            .transfer(toAddress, this.web3.utils.toWei(this.web3.utils.toBN(amount)))\n            .send({\n                ...DEFAULT_SEND_OPTIONS,\n                from: fromAddress\n            });\n\n        return tx;\n    }\n    \n      async deploy(fromAddress: string) {\n        const deployTx = await (this.contract\n            .deploy({\n                data: TTNguyenTokenJSON.bytecode,\n                arguments: []\n            })\n            .send({\n                ...DEFAULT_SEND_OPTIONS,\n                from: fromAddress,\n                to: '0x0000000000000000000000000000000000000000'\n            } as any) as any);\n\n        this.useDeployed(deployTx.contractAddress);\n\n        return deployTx.transactionHash;\n    }\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Run and test the DApp"),Object(a.b)("p",{parentName:"li"},"Input the following command to run the app once all the configs for Godwoken have been completed."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",{parentName:"pre"},"$ yarn ui\n")),Object(a.b)("p",{parentName:"li"},"Open the browser and navigate to http://localhost:3000/."))),Object(a.b)("h2",{id:"project-examples"},"Project Examples"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",{parentName:"p",href:"https://github.com/TTNguyenDev/Hackathon-Nervos/tree/main/task_12#document-porting-an-existing-ethereum-dapp-to-polyjuice"},"Porting an Existing Ethereum DApp to Polyjuice"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",{parentName:"p",href:"https://github.com/Kuzirashi/blockchain-workshop/tree/godwoken-simple"},"godwoken-simple"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",{parentName:"p",href:"https://github.com/Kuzirashi/blockchain-workshop/tree/godwoken-simple-js"},"godwoken-simple-js"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("a",{parentName:"p",href:"https://github.com/YokaiSwap"},"YokaiSwap")))))}b.isMDXComponent=!0}}]);